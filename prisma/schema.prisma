// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url               = env("DATABASE_URL")
}

model Product {
  id String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(255)
  priceInCents Int
  filePath String @db.Text
  imagePath String @db.Text
  description String @db.Text
  category String @db.VarChar(255)
  isAvailableForPurchase Boolean @default(true)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  userId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  orders Order[]
  productReviews ProductReview[]
  downloadVerifications DownloadVerification[]
  images ProductImage[]
}

model ProductImage {
  id String  @id @default(uuid()) @db.Uuid
  imagePath String  @db.Text
  productId String   @db.Uuid
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([productId])
}

model ProductReview {
  id String @id @default(uuid()) @db.Uuid
  rating Int
  review String @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  userId String @db.Uuid
  
  user User @relation(fields: [userId], references: [id], onDelete: NoAction) 
  productId String @db.Uuid
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
}

model User {
  id String @id @default(uuid()) @db.Uuid
  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  role String @default("USER") @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  products Product[]
  orders Order[]
  productReviews ProductReview[]
}

model Order {
  id String @id @default(uuid()) @db.Uuid
  pricePaidInCents Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  userId String @db.Uuid
  productId String @db.Uuid
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([productId])
}

model DownloadVerification {
  id String @id @default(uuid()) @db.Uuid
  expiresAt DateTime @db.Timestamp(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)

  productId String @db.Uuid
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}